package com.example.product.service;

import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;

import com.example.product.model.Product;
import com.example.product.repository.ProductRepository;

class ProductServiceTest {

//	@Mock
//	private 

	@Mock
	private ProductRepository productRepository;

	@InjectMocks
	ProductService productService;

	private static List<Product> products = new ArrayList<>();

//	@Test
//	void testgetAll() throws Exception {
////		Mockito.when(productRepository.findAll()).thenReturn(products);
//
//		assertNotNull(productService.getAll());
//
//	}

	@Test
	void testgetByProductId() {
		Product product = new  Product();
		
		Mockito.when(productRepository.findByProductId(2)).thenReturn(product);
		assertNotNull(productService.getByProductId(2));
	}
//	@Test
//	void testgetByProductType() {
//		ProductService productService = new ProductService();
//
//		List<Product> products = new ArrayList<>();
//
//	}
//
//	@Test
//	void testgetByProductName() {
//		ProductService productService = new ProductService();
//
//		List<Product> products = new ArrayList<>();
//
//		Mockito.when(productRepository.findByProductName(Mockito.any())).thenReturn(products);
//
//	}
//
//	@Test
//	void testgetByProductPrice() {
//		ProductService productService = new ProductService();
//
//		List<Product> products = new ArrayList<>();
//
//		List<Product> priceList = new ArrayList<>();
//
//		Mockito.when(productRepository.findAll()).thenReturn(products);
//
////		Mockito.when(p.productPrice()).thenReturn(priceList);
//
//	}

}
